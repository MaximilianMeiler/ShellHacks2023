[["0",{"pageContent":"9/1/2023\n1\nData Structures \n–\nPart I\nData Structures\n▪\nA\ndata structure\nis a particular way of organizing data in a computer so \nthat it can be used effectively\n▪\nArrays (Fixed size)\n▪\nDynamic Arrays\n▪\nOrdered set/map \n▪\nUnordered set/map \n▪\nHeap and Priority Queue\n▪\nStack / Queue / Deque\n▪\nLinked list\n▪\nPair / Tuple\n▪\nCustomized data structure\n▪\nDifferent DS suits different problems\n▪\nuse C++ STL, Java API and/or standard libraries included with Python 3\nPic from https://oi\n-\nwiki.org/","metadata":{"loc":{"lines":{"from":1,"to":36}}}}],["1",{"pageContent":"9/1/2023\n2\nData Structures \n–\nCont.\nC++\nJava\nPython\nDynamic Arrays\nvector\nArrayList\n(slightly faster than \nVector)\nlist\nOrdered set \nOrdered map\nset\nmap\nTreeSet\nTreeMap\nOrderedSet\nOrderedDict\nUnordered set \nUnordered map\nunordered_set\nunordered_map\nHashSet\nHashMap\nset\nHash table\nHeap and Priority \nQueue\npriority_queue\nPriorityQueue\nqueue.PriorityQueue\nStack \nstack\nStack\nstack\nQueue / Deque\nqueue\ndeque\nQueue\nDeque\nqueue.Queue\ndeque\nLinked list\nlist\nLinkedList\ncollections.deque\nPair / Tuple\npair<a, b> tuple<a, b, \nc>\nAbstractMap.SimpleEntry\ntuple class\nOperator Overloading Example\nstruct student {\nstring name;\nint grade;\n}\nbool operator<(const student& a, const student& b) {\nreturn \na.grade\n< \nb.grade\n|| (\na.grade\n== \nb.grade\n&& a.name > b.name);\n}\npriority_queue\n<student> \npq\n;\nint main() {\n// ...\n// set priority queue\nfor (int i = 1; i <= n; i++) {\n// get name and grade;\npq.push\n({name, grade});\n}\n// now \npq.top\n() contains student with highest grade (or if tie, student whose name is \nthe\nsmallest Lexicographic order)\n// ...\n}","metadata":{"loc":{"lines":{"from":1,"to":90}}}}],["2",{"pageContent":"9/1/2023\n3\nStack\n▪\nLast In First Out (LIFO) \n▪\nO(1) for insertion (push) and O(1) \ndeletion (pop) from the top\n▪\nUsed in Recursion, Evaluation of \nPostfix Expressions, Bracket Matching\n▪\nExample:\n▪\nBracket matching: UVA 551 \n-\nNesting \na Bunch of Brackets\n▪\nRead the brackets one by one from left to \nright. Every time we encounter a close \nbracket, we need to match it with the \nlatest open bracket\n▪\nSpecial attention: (*  *)\nPostfix Notation\n▪\nPostfix notation is a notation for writing arithmetic expressions in \nwhich the operands appear before their operators\n▪\nLeetCode\n150. Evaluate Reverse Polish Notation\n▪\nExtend: \nInfix to Postfix Conversion Using Stacks\n1.\nRead postfix expression from left to right till the end \n•\nIf  \nwordListber\n•\npush it onto Stack \n•\nIf  operator\ni.\nPop two items\n•\nA <\n-\nTop\nitem\n•\nB <\n-\nNext to Top\nitem \nii.\nEvaluate\nB\noperator\nA\n•\npush\ncalculation result onto Stack\n2.\nresult <\n-\nTop \nelement\n3.\nEND\n3\n923*\n-","metadata":{"loc":{"lines":{"from":1,"to":74}}}}],["3",{"pageContent":"9/1/2023\n4\nDynamic arrays\n▪\nVector / \nArrayList\n▪\nEfficiently add/remove elements at the end of the structure. In general, vector \nis almost as fast as using an ordinary array in O(1) time\n▪\nDeque\n▪\nDynamic array that can be efficiently manipulated at both ends of the structure\n▪\nO(1) average time with a larger constant factor\n▪\nUsed in algorithms for ‘Sliding Window’ problem, \netc\n▪\nQueue\n▪\nUsed in Breadth First Search, Topological Sort, \netc\n▪\nExample:\n▪\nhttps://codeforces.com/problemset/problem/879/B","metadata":{"loc":{"lines":{"from":1,"to":27}}}}],["4",{"pageContent":"9/6/2023\n1\nData Structures \n–\nPart II\nExample \n-\nEscape from Stones\n▪\nQuestion\n▪\nhttps://codeforces.com/problemset/problem/264/A\nl\nl\nr \nl r\n1\n2\n3\n1\n2\n3\n4\n5","metadata":{"loc":{"lines":{"from":1,"to":24}}}}],["5",{"pageContent":"9/6/2023\n2\nSet/\nTreeset\n▪\nIn C++, set is ordered and based on a balanced search tree and its \noperations work in O(log n) time\n▪\nunsorted_set\n: in C++, \nunsorted_set\nis based on a hash table and its \noperations work on O(1) on average\n▪\nC++ STL set, similar to C++ STL map\n▪\nmap stores a (key, data) pair\n▪\nset stores just the key\n▪\nIn Java: \nTreeSet\nbased on a self\n-\nbalancing tree\n▪\nExample: \nUVa10815 \n-\nAndy's First Dictionary\nPseudocode\nset<string> \nwordList\n;\nwhile\n(\ncin\n>> s) {\nfor\n(\nint\ni = 0; i < \ns.size\n(); i++) {\nif\n(\nisalpha\n(s[i]))\n{\ns[i] =\ntolower\n(s[i]);\n}\nelse\ns[i]=\n' '\n;\n}\nstringstream\ns2(s);\nwhile\n(s2 >> s1)\nwordList.insert\n(s1);\n}\nset<string>::iterator \nptr\n;\nfor\n(\nptr\n= \nwordList.begin\n(); \nptr\n!= \nwordList.end\n(); \nptr\n++) {\ncout\n<< *\nptr\n<< \nendl\n;\n} \nforeach row of input\nconvert all character to lower cases \nand change all non\n-\nalphabet character to space\nsplit into words and insert to set\nprint out word from set","metadata":{"loc":{"lines":{"from":1,"to":94}}}}],["6",{"pageContent":"9/6/2023\n3\nMaps\n▪\nAssociative containers that store elements in a mapped fashion\n▪\nEach element has a key value and a mapped value\n▪\nNo two mapped values can have same key values\n▪\nmap is based on a balanced binary search tree and its operations work in \nO(log n) time\n▪\nC++ STL map (Java \nTreeMap\n)\n▪\nExample\n▪\nGiven an array, find the k\n-\nth\noccurrence (from left to right) of an integer v\n8 3 \n1 3 2 2 4 3 2 1 \n1 3 \n2 4 \n3 2\n2 \n0 \n7\n1 ≤ n, m ≤ 100, 000, 1 ≤ k ≤ n, 1 ≤ v ≤ 1, 000, 000).\nmap<int, vector<int> > a; \nfor(int i = 0; i < n; i++) {\ncin\n>> x; \nif(!\na.count\n(x)) \na[x] = vector<int>();\na[x].\npush_back\n(i+1);\n}\nwhile(m\n--\n) {\ncin\n>> x >> y;\nif(!\na.count\n(y) || a[y].size() < x) \ncout\n<< \"0\" << \nendl\n;\nelse \ncout\n<<  a[y][x\n-\n1] << \nendl\n;\n}","metadata":{"loc":{"lines":{"from":1,"to":64}}}}],["7",{"pageContent":"9/6/2023\n4\nPriority Queue\n▪\nA multiset designed such that the first element of the queue is the greatest \nof all elements in the queue and elements are in non increasing order\n▪\neach element of the queue has a priority\n▪\nfixed order\n▪\nSmaller constant factor than multiset \n▪\nBased on heap structure, which is a special binary tree\n▪\nUsed when you only needs to find minimum or maximum value\n▪\nDescending order\n▪\nlargest value first\n▪\nUVA 1203 Argus\n▪\nGiven a number of tasks with id number and an interval, and a number k, print out \nthe first k tasks to return in chronological order\npriority_queue\n< pair< pair<\nint\n, \nint\n>, \nint\n> > \npq\n;\nwhile\n(\ntrue\n) {\ncin\n>> s;\nif\n(s == \n\"#\"\n) \nbreak\n;\ncin\n>> \nqueryNum\n>> period;\npq.\npush\n(\nmake_pair\n(\nmake_pair\n(\n-\nperiod, \n-\nqueryNum\n), \n-\nperiod));\n}\ncin\n>> k;\nwhile\n(k\n--\n) {\nauto\nevent\n= \npq.\ntop\n(); \npq.\npop\n();\ncout\n<< \n-\nevent\n.\nfirst\n.\nsecond\n<< \n'\n\\\nn'\n;\nevent\n.\nfirst\n.\nfirst\n+= \nevent\n.\nsecond\n;\npq.\npush\n(\nevent\n);\n}","metadata":{"loc":{"lines":{"from":1,"to":110}}}}],["8",{"pageContent":"9/6/2023\n5\nHash table\n▪\nAdvertised O(1) for insert, search, and delete, but\n▪\nThe hash function must be good!\n▪\nThere is no Hash Table in C++ STL (Yes in Java API)\n▪\nNevertheless, O(log n) using map is usually ok\n▪\nDirect Addressing Table (DAT)\n▪\nKey values are distinct, and \nis drawn from a universe U = {\n0, 1, . . . , m \n-\n1\n}\n▪\nStore the items in an array, indexed by keys\n▪\nExample\n▪\nUVa 11340 (Newspaper)\nmap <\nchar\n, \ndouble\n> \ncharMap\n;\ncharMap\n[c] = v;\nvalue = \ncharMap.find\n(\nch\n);\nif(value != \ncharMap.end\n())\ntotal += value\n-\n>second;\nFaster way?\nint map[522];\nmap[c+256] = v;  \nComparisons \n–\nin C++\n▪\nCount unique elements\n▪\nDetermine the most frequent value\n▪\nAdd/Remove elements","metadata":{"loc":{"lines":{"from":1,"to":58}}}}],["9",{"pageContent":"9/6/2023\n6\nPrefix Sum Array\n▪\nThe sums of prefixes (running totals) of the input sequence:\nPreSum\n0\n= a\n0\nPreSum\n1\n= a\n0\n+ a\n1\n= PreSum\n0\n+ a\n1\nPreSum\n2\n= a\n0\n+ a\n1\n+ a\n2\n= PreSum\n1\n+ a\n2\n. . .\nPreSum\nn\n=PreSum\nn\n-\n1\n+a\nn\n▪\nExample:\n▪\nStripe: \nhttps://codeforces.com/problemset/problem/18/C\ninput \nwordListbers\n1\n2\n3\n4\n5\n6\n...\nprefix sums\n1\n3\n6\n10\n15\n21\n...","metadata":{"loc":{"lines":{"from":1,"to":62}}}}],["10",{"pageContent":"8/25/2023\n1\nEfficiency\nTo Do list\n▪\nQuestionnaire\n▪\nOn Canvas: \nhttps://ufl.instructure.com/courses/487242/quizzes/1281313\n▪\nTyping speed\n▪\ntyping test at \nhttp://www.typingtest.com\n▪\nVjudge\naccount\n▪\nCreate your account using your\nfull name \nand join the group:\n▪\nhttps://vjudge.net/group/cis4930fal23\n▪\nDiscord group\n▪\nhttps://discord.gg/Y6WHuybA","metadata":{"loc":{"lines":{"from":1,"to":27}}}}],["11",{"pageContent":"8/25/2023\n2\nWhat is an algorithm\n▪\nA set of steps to accomplish a task\n▪\nExample\n▪\nGPS\n▪\nShortest path\n▪\nOnline shopping payment\n▪\nEncryption\n▪\nPackage delivery\n▪\nComplicated routing\n▪\nPrecise description to solve computational problems\n▪\nCorrectness\n▪\nApproximation\n▪\nEfficiency\n▪\nRunning time\nTime complexity\n▪\nDetermining the number of steps (operations) needed as a function of \nthe problem size \n▪\nAsymptotic Analysis\n▪\nO\n(\nf\n(n)), Big\n-\nOh of \nf\nof n, the Asymptotic Upper Bound\n▪\nW\n(\nf\n(n)), \nBig\n-\nOmega of \nf\nof n, the Asymptotic Lower Bound\n▪\nQ\n(\nf\n(n)), \nBig\n-\nTheta of \nf\nof n, the Asymptotic Tight Bound\n▪\nWhich one may be faster?\nfact = 1;\nfor(\ni\n= 1; \ni\n<= n; \ni\n++)\nfact *= \ni\n;\nsum = 0;\nfor(\ni\n= 1; \ni\n<= n; \ni\n++)\nfor(j = 1; j <= n; \nj++\n)\nsum += a[\ni\n][j];\n(a)\n(b)","metadata":{"loc":{"lines":{"from":1,"to":93}}}}],["12",{"pageContent":"8/25/2023\n3\nExample\n▪\nQuestion: which one is better, O(n*n!) or O(n\n2\n*2\nn\n)?\nhttps://www.hackerearth.com/practice/notes/sorting\n-\nand\n-\nsearching\n-\nalgorithms\n-\ntime\n-\ncomplexities\n-\ncheat\n-\nsheet/\n•\nC++ STL \nalgorithm:: sort\n•\nJava \nCollections.sort\n•\nPython\nlist.sort\n() and sorted()\n•\nObject\n-\noriented approach\nEstimating Efficiency","metadata":{"loc":{"lines":{"from":1,"to":39}}}}],["13",{"pageContent":"8/25/2023\n4\nWhat is the time complexity?\nTime complexity for string operations\nOperation\nTime complexity\nappending additional characters at the end of its \ncurrent value\ngenerally up to linear in new String length\nRemove part of the string, reducing its length\ngenerally up to linear in new String length\nReturns a reference to the character at position\nConstant\naccesses the last character\nConstant\nInserts additional characters into the string\ngenerally up to linear in new String length\n+\ngenerally linear\nGet a substring\ngenerally linear\nFind a character in the string\ngenerally linear","metadata":{"loc":{"lines":{"from":1,"to":23}}}}],["14",{"pageContent":"8/25/2023\n5\nExample: UVA10684 \n-\nThe jackpot\n▪\nQuestion\nAs Manuel wants to get rich fast and without too much work, he decided to make a career in \ngambling. Initially, he plans to study the gains and losses of players, so that, he can identify \npatterns of consecutive wins and elaborate a win\n-\nwin strategy. But Manuel, as smart as he thinks \nhe is, does not know how to program computers. So he hired you to write programs that will \nassist him in elaborating his strategy. \nYour first task is to write a program that identifies the maximum possible gain out of a sequence \nof bets. A bet is an amount of money and is either winning (and this is recorded as a positive \nvalue), or losing (and this is recorded as a negative value). \n▪\nInput\nThe input set consists of a positive number N ≤ 10000 , that gives the length of the sequence, \nfollowed by N integers. Each bet is an integer greater than 0 and less than 1000. The input is \nterminated with N = 0.\n▪\nOutput\nFor each given input set, the output will echo a line with the corresponding solution. If the \nsequence shows no possibility to win money, then the output is the message ‘Losing streak.’\nLargest Sum Continuous Subarray\n▪\nProblem\n▪\nGiven an array\na\nof\nN\nintegers. Find the \ncontinuous \nsub\n-\narray with maximum \nsum.\n▪\nConstraints:\n1 \n≤ N ≤ 10\n4\n-\n10\n3\n≤ a[i] <= 10\n3\n▪\nSolutions\n▪\nNaïve O(n\n3\n)\n-\n2\n1\n-\n5\n6\n-\n3\n10\n-\n5\n3\nstart\n-\n2\n1\n-\n5\n6\n-\n3\n10\n-\n5\n3\n1\n-\n5\n6\n-\n3\n10\n-\n5\n3\n-\n5\n6\n-\n3\n10\n-\n5\n3\n6\n-\n3\n10\n-\n5\n3\n-\n3\n10\n-\n5\n3\n10\n-\n5\n3\n-\n5\n3\n3","metadata":{"loc":{"lines":{"from":1,"to":121}}}}],["15",{"pageContent":"8/25/2023\n6\nLargest Sum Continuous Subarray\n▪\nProblem\n▪\nGiven an array\na\nof\nN\nintegers. Find the \ncontinuous \nsub\n-\narray with maximum \nsum.\n▪\nConstraints:\n1 ≤ N ≤ 10\n4\n-\n10\n7\n≤ a[\ni\n] <= 10\n7\n▪\nSolutions\n▪\nNaïve O(n\n3\n)\n▪\nEasy adjustment O(n\n2\n)\n▪\nBest: \nKadane’s\nAlgorithm O(n)\n▪\nRange of integer\n-\n2\n1\n-\n5\n6\n-\n3\n10\n-\n5\n3\nstart\nend\n-\n2\n1\n-\n5\n6\n-\n3\n10\n-\n5\n3\n1\n-\n5\n6\n-\n3\n10\n-\n5\n3\n-\n5\n6\n-\n3\n10\n-\n5\n3\n6\n-\n3\n10\n-\n5\n3\n-\n3\n10\n-\n5\n3\n10\n-\n5\n3\n-\n5\n3\n3\nKadane’s\nAlgorithm\n▪\nObservation:\n▪\nIf you know a maximum subarray of \na[1 : : j ], extend the answer to find a \nmaximum subarray ending at index \nj+1: \n▪\na maximum subarray of a[1 : : j ]\n▪\nor a subarray a[i : : j +1], for some 1 ≤ i ≤ \nj + 1\n▪\nThe sum of the new subarray was the \nmaximum subarray of a[1 : : j ] + a[j+1]\n-\n2\n1\n-\n5\n6\n-\n3\n10\n-\n5\n3\n-\n2\n-\n2\n1\n-\n5\n6\n-\n3\n10\n-\n5\n3\n1\n-\n5\n6\n-\n3\n10\n-\n5\n3\n-\n5\n6\n-\n3\n10\n-\n5\n3\n6\n-\n3\n10\n-\n5\n3\n-\n3\n10\n-\n5\n3\n10\n-\n5\n3\n-\n5\n3\n3\ni\n-\n2\n1\n-\n1\n1\n-\n4\n-\n5\n2\n6\n6\n-\n3\n3\n13\n13\n10\n8\n-\n5\n11\n3\nint \nmaxSum\n= 0, \ncurrentSum\n= 0;\nfor (int i = 0; i < n; i++) {\ncurrentSum\n= max(a[i], \ncurrentSum\n+ a [i]);\nmaxSum\n= max(\ncurrentSum\n, \nmaxSum\n);\n}","metadata":{"loc":{"lines":{"from":1,"to":234}}}}],["16",{"pageContent":"8/25/2023\n7\nExtension\n▪\nMaximum Sub\n-\nsequence Product\n▪\nhttps://vjudge.net/problem/UVA\n-\n787\na[\ni\n]\nmax(i\n-\n1)\nmin(i\n-\n1)\nmax(i) = max(i\n-\n1)*a(i) \nmin(i) = a(i)\nmax(\ni\n) = max(i\n-\n1)*a(\ni\n) \nmin(\ni\n) = min(i\n-\n1)*a(\ni\n)\nmin(i\n-\n1)\nmax(\ni\n) = a(\ni\n) \nmin(\ni\n) = min(i\n-\n1)*a(\ni\n)\nmax(i\n-\n1)\nmin(i\n-\n1)\nmax(i) = a(i) \nmin(\ni\n) = max(i\n-\n1)*a(\ni\n)\nmax(\ni\n) = min(i\n-\n1)*a(\ni\n) \nmin(\ni\n) = max(i\n-\n1)*a(\ni\n)\nmin(i\n-\n1)\nmax(i) = min(i\n-\n1)*a(i) \nmin(\ni\n) = a(\ni\n)\n>0\n>0\n>0\n>0\n>0\n≤0\n≤0\n≤0\n≤0\n≤0\nmax(\ni\n) = max3(max(i\n-\n1)*a(\ni\n), min(i\n-\n1)*a(\ni\n), a(\ni\n)) \nmin(\ni\n) = min3(min(i\n-\n1)*a(\ni\n), max(i\n-\n1)*a(\ni\n), a(\ni\n))\nCatch: big numbers\nCode optimization\n▪\nImplementation is also important\n▪\nMore efficient\n▪\nNot all optimizations are useful","metadata":{"loc":{"lines":{"from":1,"to":136}}}}],["17",{"pageContent":"8/25/2023\n8\nProcessor features\n▪\nAsymptotic analysis does not account \nfor differences  in memory access times\n▪\nPrograms that do more work may take less \ntime than those that do less work\n▪\nCache friendly\n▪\nParallelism\nhttps://en.wikipedia.org/wiki/Memory_hierarchy","metadata":{"loc":{"lines":{"from":1,"to":14}}}}],["18",{"pageContent":"1\nCIS4930 \n-\nSpecial Topics in CISE: \nIntro to Competitive Programming\nM,W,F\n|\nPeriod \n4\n(10:40 AM \n-\n11:30 AM)\nCSE E121\nFall 2023\nInstructor: Ronnie Zhang\nWhat is competitive programming\n•\nAim: write code to solve given problems\n•\nDesign of algorithms\n•\nInventing efficient algorithms to solve well\n-\ndefined problems\n•\nImplementation of algorithms\n•\nShort programs\n•\nShould be written quickly\n•\nLanguage?\n•\n71% of top 4500 participants in Google Code Jam 2019 using C++\n•\n“Competitive Programming” is\n•\nGiven well\n-\nknown Computer Science (CS) problems, solve them as quickly as \npossible!\nC++\n71%\nPython\n21%\nJava\n8%\nProgram Language Used\nC++\nPython\nJava","metadata":{"loc":{"lines":{"from":1,"to":51}}}}],["19",{"pageContent":"2\nWhy should I take this class?\n•\nSuccess in programming contests, tech interviews, and future career\n•\nFill the gap between algorithms and problem solving\n•\nGoal:\n•\nSharpen programming and problem\n-\nsolving skills\n•\nAble to select appropriate algorithms for a given problem\n•\nAble to integrate multiple algorithms to solve a complex problem\n•\nAble to implement advanced algorithms in a timely manner\n•\nSolve problems in teams\n•\nNot immerse you with thousands of competition questions\n•\nBut you still need to practice A LOT\nCompetition\n•\nICPC \n–\nthe International Collegiate Programming Contest\n•\nOnline competitions\n•\nTopCoder\n•\nGoogle’s Coding Competitions\n•\nGoogle Code jam\n•\nGoogle Hash Code\n•\nGoogle Kick Start\n•\nMicrosoft Imagine Cup\n•\nFacebook Hacker Cup\n•\nCodeChef\n•\nCodeforces\n•\nEtc.","metadata":{"loc":{"lines":{"from":1,"to":51}}}}],["20",{"pageContent":"3\nQuestion format\n•\nAnatomy of a programming contest \nproblem\n•\nProblem Statements\n•\nBackground story/problem description\n•\nInput and Output description\n•\nConstraints\n•\nInput size: memory limit\n•\nRunning time: Time limit\n•\nAccuracy\n•\nSample Input and Sample Output \n•\nHelp you to understand the problem and debug\nSimple Example\n•\nLeetcode\n1557:\nMinimum Number of Vertices to Reach All Nodes\nGiven a\ndirected acyclic graph\n,\nwith\nn\nvertices numbered \nfrom\n0\nto\nn\n-\n1\n,\nand an array\nedges\nwhere\nedges[\ni\n] = [\nfrom\ni\n, \nto\ni\n]\nrepresents a directed edge from node\nfrom\ni\nto node\nto\ni\n.\nFind\nthe smallest set of vertices from which all nodes in the graph are \nreachable\n. It's guaranteed that a unique solution exists.\nNotice that you can return the vertices in any order.\nConstraints:\n•\n2 <= n <= 10^5\n•\n1 <= \nedges.length\n<= min(10^5, n * (n \n-\n1) / 2)\n•\nedges[\ni\n].length == 2\n•\n0 <= \nfrom\ni\n,\nto\ni\n< n\n•\nAll pairs\n(\nfrom\ni\n, \nto\ni\n)\nare distinct\nWhat if the given numbers are HUGE?\nNot all the input constraints are explicit\nAlways think about the worst case \nscenario, edge cases, \netc","metadata":{"loc":{"lines":{"from":1,"to":101}}}}],["21",{"pageContent":"4\nCommon Verdict information\n•\nIn Queue (QU)\n•\nAccepted (AC): Congratulations!\n•\nPresentation Error (PE)\n•\nWrong Answer (WA)\n•\nCompile Error (CE)\n•\nRuntime Error (RE)\n•\nTime Limit Exceeded (TL)\n•\nMemory Limit Exceeded (ML)\n•\nOutput Limit Exceeded (OL)\nPre\n-\nrequisite\n•\nBasic knowledge in programming methodology\n•\nFamiliar with at least one of the following programming languages\n•\nC++, Java, Python\n•\nConfident in coding debugging, and testing\n•\nData structure\n•\nArray, stack, queues, deques\n•\nGraph, tree, string\n•\nAlgorithm\n•\nRecursion\n•\nSorting/Searching algorithm\n•\nDynamic programming\n•\nMath\n•\nBinaries, fractions and complex numbers.\n•\nMatrix multiplication \n•\nTrigonometry\nhttps://me.me/i/thuaha\n-\nhadi\n-\nsanta\n-\npinta\n-\ndear\n-\nsanta\n-\ni\n-\nwant\n-\nto\n-\nbe\n-\n1f2714f290fe48ca86c36cd24a6079b1","metadata":{"loc":{"lines":{"from":1,"to":74}}}}],["22",{"pageContent":"5\nTentative Course Schedule\n•\nWeek 1:\nIntroduction and Efficiency\n•\nWeek 2:\nData Structure\n•\nWeek 3:\nSorting and Searching\n•\nWeek 4:\nGreedy Algorithm\n•\nWeek 5:\nDynamic Programming\n•\nWeek 6:\nDynamic Programming \n–\ncont.\n•\nWeek 7:\nGraph Algorithms\n•\nWeek 8:\nGraph Algorithms \n–\ncont.\n•\nWeek 9:\nAlgorithm Design\n•\nWeek 10:\nRange Queries\n•\nWeek 11: Tree Algorithms\n•\nWeek 12: String Algorithms\n•\nWeek 13: Geometry Algorithms\n•\nWeek 14: Bit Manipulations\n*schedule is subject to change\nRecommended Materials\n•\nGuide to Competitive Programming\n•\nAuthors: Antti Laaksonen\n•\nPublisher: Springer\n•\nISBN: 3319725467\n•\nAlgorithms Unlocked\n•\nAuthors: \nCormen\n, Thomas H\n•\nPublisher: MIT Press\n•\nISBN: 0262518805 \n•\nOthers","metadata":{"loc":{"lines":{"from":1,"to":66}}}}],["23",{"pageContent":"6\nClass format and policies\n•\n50 minutes lecture, 50 minutes examples, 50 minutes problem solving\n•\n2\n-\n3 questions if team\n•\n2 questions if individual\n•\nHomework every week\n•\nLate submission\n•\nMidterm and Final\n•\nMidterm: 3 hours 8 questions team\n•\nFinal: 6 questions individual \n12/14/2023\n@ 5:30 PM \n-\n8:30 PM\n•\nEvaluation of Grade\nAssignment\nTotal Points\nPercentage of Final Grade\nHomework Sets (12)\n100 each\n35%\nMidterm Exam\n100\n25%\nFinal Exam\n100\n25%\nClass activities (10)\n1 each\n15%\n100%\nPercent \nGrade \nGrade Points \n94.0 \n-\n100\nA  \n4.00 \n90.0 \n–\n93.9\nA\n-\n3.67 \n87.0 \n-\n89.9\nB+ \n3.33 \n84.0 \n-\n86.9\nB \n3.00 \n80.0 \n-\n83.9\nB\n-\n2.67 \n77.0 \n-\n79.9\nC+ \n2.33 \n74.0 \n-\n76.9\nC \n2.00 \n70.0 \n-\n73.9\nC\n-\n1.67 \n67.0 \n-\n69.9\nD+ \n1.33 \n64.0 \n-\n66.9\nD \n1.00 \n61.0 \n-\n63.9\nD\n-\n0.67 \n0 \n–\n60.9\nE \n0.00 \nImportant Dates\nClass Practice\nMidterm/Final Exam","metadata":{"loc":{"lines":{"from":1,"to":112}}}}],["24",{"pageContent":"7\nTips for Practicing\n•\nNumber of solved problems is not as important as the quality of the \nproblem\n•\nStart with questions you feel comfortable\n•\nGet used to pace and adjust speed\n•\nCheck other people’s code to improve\n•\nShorter, faster\n•\nTry some online contest\n•\nNow try some hard problems\n•\nTry something a little above your level\n•\nRefine your code, test and debug\n•\nKnow your defects\n•\nEnhancing Your Theoretical Background\n•\nArithmetic, combinatorics, number theory, game theory\nUpcoming competitions\n•\nACM ICPC Southeast USA regional programming contest\n•\nFeb 2024\n•\nICPC North America Championship if placed\n•\nThe North American Invitational Programming Contest\nCategory\nFrequency\n1\nAd Hoc\n1\n-\n2\n2\nComplete Search (Iterative/Recursive) \n1\n-\n2\n3\nDivide and Conquer \n0\n-\n1\n4\nGreedy (usually the original ones) \n0\n-\n1\n5\nDynamic Programming (usually the original ones) \n1\n-\n3\n6\nGraph\n1\n-\n2\n7\nMathematics\n1\n-\n2\n8\nString Processing \n1\n9\nComputational Geometry \n1\n10\nSome Harder/Rare Problems\n1\n-\n2","metadata":{"loc":{"lines":{"from":1,"to":84}}}}],["25",{"pageContent":"8\nOther Information\n•\nInstructor: Rong Zhang\n•\nOffice Location: CSE E526\n•\nTelephone: (352) 294\n-\n6680\n•\nEmail Address: \nrzhang1@ufl.edu\n•\nOffice Hours: See Canvas Syllabus\n•\nPeer Mentors\n•\nSchrank, Matthew B. <mschrank@ufl.edu>\n•\nBaldwin, John Arthur,Jr <johnbaldwin@ufl.edu>\n•\nMott, Joshua <jmott1@ufl.edu>\n•\nEum, Alex <alexeum@ufl.edu>\n•\nOffice hours: See Canvas Syllabus","metadata":{"loc":{"lines":{"from":1,"to":27}}}}],["26",{"pageContent":"1\nGreedy \n–\nPart I\nOptimization Problems\n▪\nProblems of finding the best solution from all feasible solutions\n▪\nFeasible solution: any solution that satisfies some constraints\n▪\nOptimal solution: a feasible solution that maximizes or minimizes the objective function\n▪\nA “greedy algorithm” sometimes works well for optimization problems\n▪\nAlways make the choice that looks best at the moment, regardless future consequences\n▪\nThe hope: by choosing a local optimum at each step, you will end up at a global optimum\n▪\nGreedy algorithm will get a solution, but may not be the optimum solution\n▪\nE.g.\n▪\nGet on the shortest road first\n▪\nAssign work to the fastest worker\n▪\nCommonly used to find approximations for NP\n-\nComplete problems\n▪\nGreedy algorithms tend to be easier \nto code","metadata":{"loc":{"lines":{"from":1,"to":32}}}}],["27",{"pageContent":"2\nExample: Counting Money\n▪\nSuppose you want to count out a certain amount of money, using the \nfewest possible bills and coins\n▪\nA greedy algorithm to do this would be:\nAt each step, take the largest possible bill or coin that does not overshoot\n▪\nExample: To make $7.26, you can choose:\n▪\na $5 bill\n▪\ntwo $1 bills, to make $7\n▪\na 25¢ coin, to make $7.25\n▪\na 1¢ coin, to make $7.26\n▪\nFor US money, the greedy algorithm always gives the optimum solution\n▪\nWhat if you have coins value 1¢, 7¢, and 10¢?\n▪\nThe greedy algorithm results in a solution, but not an optimal solution\nLeetcode\n55. Jump Game\nfor\ni = 0 to n\n-\n1 \nif\n(can not reach i)\nreturn \nfalse\nelse\nupdate the farthest position can reach\nreturn\ntrue\nset \ntarget as n\n-\n1\nfor\ni = n\n-\n2 to 0 \nif\n(i can reach target)\nupdate target as i\nreturn\ntrue \nif target is 0","metadata":{"loc":{"lines":{"from":1,"to":52}}}}],["28",{"pageContent":"3\nMeeting Scheduling\n▪\nMeeting scheduling with only one meeting room\n▪\nMeeting \ni\nstarts at \ns\ni\nand finishes at \nf\ni\n▪\nTwo meetings are compatible\nif they don't overlap\n▪\nGoal: find maximum number of mutually compatible meetings\nTime\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nf\ng\nh\ne\na\nb\nc\nd\nExample from chapter 4 of “Algorithm Design”\nMeeting Scheduling \n–\ngreedy\n▪\nPick meetings with earliest start time\n▪\nPick meetings with earliest finishing time\nTime\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nf\ng\nh\ne\na\nb\nc\nd\nTime\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nf\ng\nh\ne\na\nb\nc\nd\na\nf","metadata":{"loc":{"lines":{"from":1,"to":91}}}}],["29",{"pageContent":"4\nMeeting Scheduling \n–\ngreedy\n▪\nPick the shortest meetings\n▪\nPick meetings with fewest conflicts\nTime\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nf\ng\nh\ne\na\nb\nc\nd\nTime\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nf\ng\nh\ne\na\nb\nc\nd\na\nf\nMeeting Scheduling \n–\nAlgorithm\n▪\nConsider \nmeeting\ns in increasing order of finish time. Take each \nmeeting provided it's compatible with the ones already taken\n▪\nTime complexity  \n▪\nSorting step: O(n log n)\n▪\nCompatible \nstep: O(n)\n▪\nAssume meeting \nj\nbe the one which was added last to A\n▪\nMeeting\ni\nis compatible with A if \ns\ni\n\nf\nj\nSort\nmeetings by finish times so that f\n1\n\nf\n2\n\n... \n\nf\nn\n.\nA \n\n\n// set of meetings selected\nfor\ni = 1:n \nif\n(meeting \ni\ncompatible with meetings in A)\nA \n\nA\n\n{i}\nreturn\nA","metadata":{"loc":{"lines":{"from":1,"to":109}}}}],["30",{"pageContent":"5\nMeeting Scheduling \n-\nMore\n▪\nWhy this is greedy?\n▪\nMaximizes the amount of unscheduled time remaining\n▪\nGreedy: leaves as much opportunity as possible for the remaining activities to \nbe scheduled\n▪\nAssume greedy is not optimal\n▪\nLet i\n1\n, i\n2\n, ... \ni\nk\ndenote set of meetings scheduled by greedy\n▪\nLet j\n1\n, j\n2\n, ... \nj\nm\ndenote set of meetings in the optimal solution with i\n1\n= j\n1\n, i\n2 \n= j\n2\n, \n..., \ni\nr\n= \nj\nr\nfor the largest possible value of r. \nj\n1\nj\n2\nj\nr\ni\n1\ni\n2\ni\nr\ni\nr+1\n. . .\nGreedy:\nOPT:\nj\nr+1\nreplace meeting j\nr+1\nwith meeting \ni\nr+1\nwill still be optimal\nmeeting i\nr+1\nfinishes before j\nr+1\nMultiple Meeting Rooms\n▪\nWhat if we have multiple meeting rooms?\n▪\nAssumption: all meeting rooms are equivalent\n▪\nGoal: \nfind minimum number of meeting rooms to hold all meetings\nso that no two occur at the same time in the same room\nTime\n9\n9:30\n10\n10:30\n11\n11:30\n12\n12:30\n1\n1:30\n2\n2:30\nh\nc\nb\na\ne\nd\ng\nf\ni\nj\n3\n3:30\n4\n4:30\n1\n2\n3\n4\nTime\n9\n9:30\n10\n10:30\n11\n11:30\n12\n12:30\n1\n1:30\n2\n2:30\nh\nc\na\ne\nf\ng\ni\nj\n3\n3:30\n4\n4:30\nd\nb\n1\n2\n3","metadata":{"loc":{"lines":{"from":1,"to":145}}}}],["31",{"pageContent":"6\nMultiple Meeting Rooms \n–\nAlgorithm\n▪\nSort meetings in increasing order of start time\n▪\nFrom the first meeting to the last\n▪\nAssign the meeting to any meeting room which is vacant\n▪\nIf no meeting room is available, get a new meeting room\nSort\nintervals by starting time so that s\n1\n\ns\n2\n\n... \n\ns\nn\nd \n\n0\nfor\ni = 1 to n \nif\n(room j is free now)\nschedule meeting \ni\nin room j\nelse\nallocate a new room d + 1\nschedule meeting \ni\nin room d + 1\nd \n\nd + 1\nUse priority queue\nMultiple Meeting \nR\nooms \n–\nProof\n▪\nKey observation\n▪\nNumber of meeting rooms needed  ≥ number of meetings hold at the same time\n▪\nLet d = number of meeting rooms that the greedy algorithm allocates\n▪\nMeeting room d is opened because we needed to schedule meeting j when all \nother d\n-\n1 are not vacant\n▪\nThese d\n-\n1 meetings each end after \ns\nj\n(because of incompatible)\n▪\nSince we sorted by start time, all these incompatibilities are caused by meetings \nthat start no later than \ns\nj\n▪\nThus, we have d meetings overlapping at time \ns\nj\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nf\ng\nh\ne\na\nb\nc\nd","metadata":{"loc":{"lines":{"from":1,"to":94}}}}],["32",{"pageContent":"7\nMinimizing Lateness\n▪\nDetails\n▪\nSingle meeting room: one meeting at a time\n▪\nMeeting j requires \nt\nj\nunits of time and is required to be finished by time \nd\nj\n.\n▪\nIf j starts at time \ns\nj\n, it finishes at time f\nj\n= \ns\nj\n+ \nt\nj\n. \n▪\nLateness definition:  \n\nj\n= max {0,  f\nj\n-\nd\nj\n}.\n▪\nGoal:  schedule all meetings to minimize the maximum\nlateness L = max \n\nj\n.\n▪\nE.g., if the scheduled order:  3, 2, 6, 1, 5, 4\n▪\nBest:\nd\nj\n6\nt\nj\n3\n1\n8\n2\n2\n9\n1\n3\n9\n4\n4\n14\n3\n5\n15\n2\n6\nlateness = 0\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nd\n5\n= 14\nd\n2\n= 8\nd\n6\n= 15\nd\n1\n= 6\nd\n4\n= 9\nd\n3\n= 9\nlateness = 2\nmax lateness = 6\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nd\n5\n= 14\nd\n2\n= 8\nd\n6\n= 15\nd\n1\n= 6\nd\n4\n= 9\nd\n3\n= 9\nmax lateness = 1\nMinimizing Lateness: Greedy Approach\n▪\nConsider meetings in ascending order \nof meeting time \nt\nj\n.\n▪\nShortest meeting time first\n▪\nConsider meetings in ascending order \nof slack \nd\nj\n-\nt\nj\n▪\nSmallest slack\nd\nj\nt\nj\n100\n1\n1\n10\n10\n2\nd\nj\nt\nj\n2\n1\n1\n10\n10\n2\n▪\nEarliest deadline first\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nd\n5\n= 14\nd\n2\n= 8\nd\n6\n= 15\nd\n1\n= 6\nd\n4\n= 9\nd\n3\n= 9\nmax lateness = 1\nd\nj\n6\nt\nj\n3\n1\n8\n2\n2\n9\n1\n3\n9\n4\n4\n14\n3\n5\n15\n2\n6","metadata":{"loc":{"lines":{"from":1,"to":239}}}}],["33",{"pageContent":"8\nMinimizing Lateness: Greedy Approach\n▪\nEarliest deadline first\n▪\nProof\n▪\nThere exists an optimal schedule with no idle time\n▪\nAll schedules with no inversion and no idle time have the same maximum \nlateness\n▪\nGiven a schedule S, an inversion is a pair of jobs \ni\nand j such that d\ni\n< \nd\nj\nbut j scheduled \nbefore \ni\nSort\nn meetings by deadline so that d\n1\n\nd\n2\n\n... \n\nd\nn\nt \n\n0\nfor\nj = 1 to n\nAssign job j to interval [t, t + \nt\nj\n]\ns\nj\n\nt, f\nj\n\nt + \nt\nj\nt \n\nt + \nt\nj\noutput\nintervals [\ns\nj\n, \nf\nj\n]\nStall Reservations\n▪\nhttps://vjudge.net/problem/POJ\n-\n3190","metadata":{"loc":{"lines":{"from":1,"to":69}}}}],["34",{"pageContent":"9\nUVa\n11292 Dragon of \nLoowater\n▪\nApproach 1\n▪\nFor each head, find the shortest knight \nwhose height is taller than the diameter \nof the head\n▪\nCan use binary search\n▪\nApproach 2\n▪\nSort the diameter of the heads\n▪\nSort the height of the knight\n▪\nSet knight index j as 0\n▪\nFor each diameter of the heads\n▪\nIf knight j can do the job, \nj++\n▪\nIf no more knight available, print “\nLoowater\nis doomed!”\n▪\nPrint the cost\nGreedy Procedure\n▪\nChoose the one that looks best right now\n▪\nMake a locally optimal choice in hope of getting a globally optimal solution\n▪\nGreedy algorithms don’t always yield an optimal solution\nprocedure Greedy \n(\nA, n\n)\nbegin\nsolution \n\nØ\n;\nfor \ni \n\n1 \nto \nn\ndo\nx \n\nSelect \n(\nA\n)\n;\n// based on the objective\n// function\nif Feasible (\nsolution,\nx\n), \nthen \nsolution\n\nUnion (\nsolution,\nx\n); \nend;\n▪\nKeys:\n▪\nSelect\n▪\nA greedy procedure, based on a given \nobjective function, which selects input \nfrom A, removes it and assigns its value \nto x\n▪\nFeasible\n▪\nA \nboolean\nfunction to decide if x can be \nincluded into solution vector (without \nviolating any given constraint)","metadata":{"loc":{"lines":{"from":1,"to":92}}}}],["35",{"pageContent":"Introduction to Competitive Programming\nCIS 4930   Class# 28119\nCredits: 3\nClass Periods:   MWF Period 4 10:40am – 11:30am\nLocation:   CSE E121\nAcademic Term:  Fall 2023\n\nInstructor:  Rong Zhang\n\n * Office location: CSE E526\n * E-mail address: rzhang@cise.ufl.edu [rzhang@cise.ufl.edu]\n * Phone number: 352-294-6680\n * Office hours: noon - 2pm on Mondays\n\nPeer Mentor:\n\nPlease contact through the Canvas website\n\n * Baldwin, John Arthur,Jr <johnbaldwin@ufl.edu>, office hours:  Tuesday 9-10 am\n   and Thursday from 3-4 pm\n * Mott, Joshua <jmott1@ufl.edu> office hours: Wednesday from 11:45-12:45 and\n   from Friday 12:45-1:45 \n\nCourse Description\n\nIntroducing techniques for attacking and solving challenging computational\nproblems. Topics including search, divide and conquer, dynamic programming,\ngraph, string processing, and computational geometry\n\nCourse Pre-Requisites / Co-Requisites\n\nCOP 3530 Data Structures and Algorithm with a minimum grade of B\n\nCourse Objectives\n\nSharpen programming and problem-solving skills.  Able to select appropriate\nalgorithms for a given problem, integrate multiple algorithms to solve a complex\nproblem, and implement advanced algorithms in a timely manner. Solve problems in\nteams.\n\nWe expect that the best students from this course will represent UF at the\nregional ACM Programming Competition, and possibly at the North American and\ninternational ACM Competition.\n\nMaterials and Supply Fees\n\nAdd'l Course Fees: $5.55\n\nRecommended Materials\n\n * Guide to Competitive Programming\n   * Authors: Antti Laaksonen\n   * Publisher: Springer\n   * ISBN: 3319725467\n * Algorithms Unlocked\n   * Authors: Cormen, Thomas H\n   * Publisher: MIT Press\n   * ISBN: 0262518805\n\nCourse Schedule","metadata":{"loc":{"lines":{"from":1,"to":60}}}}],["36",{"pageContent":"Course Schedule\n\n * Week 1:   Introduction and Efficiency\n * Week 2:   Data Structure\n * Week 3:   Sorting and Searching\n * Week 4:   Greedy Algorithm          \n * Week 5:   Dynamic Programming    \n * Week 6:   Dynamic Programming – cont.\n * Week 7:   Graph Algorithms\n * Week 8:   Graph Algorithms - cont.\n * Week 9:   Algorithm Design\n * Week 10: Range Queries\n * Week 11: Tree Algorithms\n * Week 12: String Algorithms\n * Week 13: Geometry Algorithms\n * Week 14: Bit Manipulations\n\n* one week means three 50 minutes class time. Schedule is subject to change\n\nAttendance Policy, Class Expectations, and Make-Up Policy\n\nYou are expected to attend class. There will be class activities which will be\ngraded and count toward your final grade. Excused absences must be consistent\nwith university policies in the undergraduate catalog\n(https://catalog.ufl.edu/ugrad/current/regulations/info/attendance.aspx (Links\nto an external site.)\n[https://catalog.ufl.edu/ugrad/current/regulations/info/attendance.aspx]) and\nrequire appropriate documentation.\n\nYou may discuss assignments with other students. But you must write the code by\nyourself. If one submission is proven to be copied from another student or\ndirectly from the internet, 0 point will be given.\n\nLate assignments will be accepted with a penalty of deduction of 10% of the\nmaximum point value every 12 hours, for up to 3 days.\n\nEvaluation of Grades\n\nAssignment Total Points Percentage of Final Grade Homework Sets (12) 100 each\n35% Midterm Exam 100 25% Final Exam 100 25% Practice Contests (9)  10 each 15%\nTotal 100%\n\nGrading Policy\n\nGrade\nRange\nA\n100 %\nto 94.0%\nA-\n< 94.0 %\nto 90.0%\nB+\n< 90.0 %\nto 87.0%\nB\n< 87.0 %\nto 84.0%\nB-\n< 84.0 %\nto 80.0%\nC+\n< 80.0 %\nto 77.0%\nC\n< 77.0 %\nto 74.0%\nC-\n< 74.0 %\nto 70.0%\nD+\n< 70.0 %\nto 67.0%\nD\n< 67.0 %\nto 64.0%\nD-\n< 64.0 %\nto 61.0%\nF\n< 61.0 %\nto 0.0%","metadata":{"loc":{"lines":{"from":60,"to":141}}}}],["37",{"pageContent":"More information on UF grading policy may be found\nat: https://catalog.ufl.edu/ugrad/current/regulations/info/grades.aspx (Links to\nan external site.)\n[https://catalog.ufl.edu/ugrad/current/regulations/info/grades.aspx]\n\nMore information on UF grading policy may be found\nat: https://catalog.ufl.edu/ugrad/current/regulations/info/grades.aspx\n[https://catalog.ufl.edu/ugrad/current/regulations/info/grades.aspx]\n\n\n\nStudents Requiring Accommodations\n\nStudents with disabilities who experience learning barriers and would like to\nrequest academic accommodations should connect with the disability Resource\nCenter by visiting https://disability.ufl.edu/students/get-started/\n[https://disability.ufl.edu/students/get-started/]\n\nIt is important for students to share their accommodation letter with their\ninstructor and discuss their access needs, as early as possible in the semester.\n\nCourse Evaluation\n\nStudents are expected to provide professional and respectful feedback on the\nquality of instruction in this course by completing course evaluations online\nvia GatorEvals. Guidance on how to give feedback in a professional and\nrespectful manner is available at https://gatorevals.aa.ufl.edu/students/\n[https://gatorevals.aa.ufl.edu/students/]\n\nStudents will be notified when the evaluation period opens, and can complete\nevaluations through the email they receive from GatorEvals, in their Canvas\ncourse menu under GatorEvals, or via https://ufl.bluera.com/ufl/\n[https://ufl.bluera.com/ufl/]\n\nSummaries of course evaluation results are available to students\nat https://gatorevals.aa.ufl.edu/public-results/\n[https://gatorevals.aa.ufl.edu/public-results/]\n\nUniversity Honesty Policy","metadata":{"loc":{"lines":{"from":143,"to":181}}}}],["38",{"pageContent":"Summaries of course evaluation results are available to students\nat https://gatorevals.aa.ufl.edu/public-results/\n[https://gatorevals.aa.ufl.edu/public-results/]\n\nUniversity Honesty Policy\n\nUF students are bound by The Honor Pledge which states, “We, the members of the\nUniversity of Florida community, pledge to hold ourselves and our peers to the\nhighest standards of honor and integrity by abiding by the Honor Code. On all\nwork submitted for credit by students at the University of Florida, the\nfollowing pledge is either required or implied: “On my honor, I have neither\ngiven nor received unauthorized aid in doing this assignment.” The Conduct Code\n(https://sccr.dso.ufl.edu/process/student-conduct-code/)\n[https://sccr.dso.ufl.edu/process/student-conduct-code/]\n\n specifies a number of behaviors that are in violation of this code and the\npossible sanctions.  If you have any questions or concerns, please consult with\nthe instructor or TAs in this class.\n\nCommitment to a Safe and Inclusive Learning Environment\n\nThe Herbert Wertheim College of Engineering values broad diversity within our\ncommunity and is committed to individual and group empowerment, inclusion, and\nthe elimination of discrimination.  It is expected that every person in this\nclass will treat one another with dignity and respect regardless of gender,\nsexuality, disability, age, socioeconomic status, ethnicity, race, and culture.\n\nIf you feel like your performance in class is being impacted by discrimination\nor harassment of any kind, please contact your instructor or any of the\nfollowing:\n\nYour academic advisor or Graduate Program Coordinator\n\nJennifer Nappo, Director of Human Resources, 352-392-0904, jpennacc@ufl.edu\n\nCurtis Taylor, Associate Dean of Student Affairs, 352-392-2177,\ntaylor@eng.ufl.edu\n\nToshikazu Nishida, Associate Dean of Academic Affairs,\n352-392-0943, nishida@eng.ufl.edu [nishida@eng.ufl.edu]\n\nSoftware Use","metadata":{"loc":{"lines":{"from":181,"to":222}}}}],["39",{"pageContent":"Toshikazu Nishida, Associate Dean of Academic Affairs,\n352-392-0943, nishida@eng.ufl.edu [nishida@eng.ufl.edu]\n\nSoftware Use\n\nAll faculty, staff, and students of the University are required and expected to\nobey the laws and legal agreements governing software use.  Failure to do so can\nlead to monetary damages and/or criminal penalties for the individual violator. \nBecause such violations are also against University policies and rules,\ndisciplinary action will be taken as appropriate.  We, the members of the\nUniversity of Florida community, pledge to uphold ourselves and our peers to the\nhighest standards of honesty and integrity.\n\nStudent Privacy\n\nThere are federal laws protecting your privacy with regards to grades earned in\ncourses and on individual assignments.  For more information, please\nsee:  https://registrar.ufl.edu/ferpa.html\n[https://registrar.ufl.edu/ferpa.html]\n\nCampus Resources:\n\nHealth and Wellness\n\n\n\nU Matter, We Care:\n\nYour well-being is important to the University of Florida.  The U Matter, We\nCare initiative is committed to creating a culture of care on our campus by\nencouraging members of our community to look out for one another and to reach\nout for help if a member of our community is in need.  If you or a friend is in\ndistress, please contact umatter@ufl.edu so that the U Matter, We Care Team can\nreach out to the student in distress.  A nighttime and weekend crisis counselor\nis available by phone at 352-392-1575.  The U Matter, We Care Team can help\nconnect students to the many other helping resources available including, but\nnot limited to, Victim Advocates, Housing staff, and the Counseling and Wellness\nCenter.  Please remember that asking for help is a sign of strength.  In case of\nemergency, call 9-1-1.\n\nCounseling and Wellness Center: https://counseling.ufl.edu\n[https://counseling.ufl.edu/], and  392-1575; and the University Police\nDepartment: 392-1111 or 9-1-1 for emergencies.\n\nSexual Discrimination, Harassment, Assault, or Violence","metadata":{"loc":{"lines":{"from":222,"to":266}}}}],["40",{"pageContent":"Sexual Discrimination, Harassment, Assault, or Violence\n\nIf you or a friend has been subjected to sexual discrimination, sexual\nharassment, sexual assault, or violence contact the Office of Title IX\nCompliance [https://titleix.ufl.edu/], located at Yon Hall Room 427, 1908\nStadium Road, (352) 273-1094, title-ix@ufl.edu [title-ix@ufl.edu]\n\nSexual Assault Recovery Services (SARS)\n\nStudent Health Care Center, 392-1161.\n\nUniversity Police Department at 392-1111 (or 9-1-1 for emergencies),\nor http://www.police.ufl.edu/ [http://www.police.ufl.edu/].\n\nAcademic Resources\n\nE-learning technical support, 352-392-4357 (select option 2) or e-mail\nto Learning-support@ufl.edu\n[Learning-support@ufl.edu]. https://lss.at.ufl.edu/help.shtml\n[https://lss.at.ufl.edu/help.shtml].\n\nCareer Resource Center, Reitz Union, 392-1601.  Career assistance and\ncounseling; https://career.ufl.edu [https://career.ufl.edu/].\n\nLibrary Support, http://cms.uflib.ufl.edu/ask [http://cms.uflib.ufl.edu/ask].\nVarious ways to receive assistance with respect to using the libraries or\nfinding resources.\n\nTeaching Center, Broward Hall, 392-2010 or 392-6420. General study skills and\ntutoring. https://teachingcenter.ufl.edu/ [https://teachingcenter.ufl.edu/].\n\nWriting Studio, 302 Tigert Hall, 846-1138. Help brainstorming, formatting, and\nwriting papers. https://writing.ufl.edu/writing-studio/\n[https://writing.ufl.edu/writing-studio/].\n\nStudent Complaints\nCampus: https://sccr.dso.ufl.edu/policies/student-honor-code-student-conduct-code/\n[https://sccr.dso.ufl.edu/policies/student-honor-code-student-conduct-code/];https://care.dso.ufl.edu\n[https://care.dso.ufl.edu/]\n\nOn-Line Students\nComplaints: http://www.distance.ufl.edu/student-complaint-process\n[http://www.distance.ufl.edu/student-complaint-process]","metadata":{"loc":{"lines":{"from":266,"to":308}}}}]]